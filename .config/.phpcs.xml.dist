<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards based custom ruleset for your code">
	<description>Generally-applicable sniffs for WordPress code.</description>

	<!-- What to scan -->
	<file>../wordpress-plugin-name.php</file>
	<file>../local.php</file>
	<file>../src</file>
	<file>../views</file>
	<file>../common</file>
	<file>../test</file>
	<exclude-pattern>../test/phpunit/wp-config.php</exclude-pattern>
	<exclude-pattern>../test/phpunit/bootstrap.php</exclude-pattern>

	<!-- How to scan -->
	<!-- Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!-- Annotated ruleset: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<arg value="sp"/><!-- Show sniff and progress -->
	<arg name="basepath" value="../"/><!-- Strip the file paths down to the relevant bit -->
	<arg name="colors"/>
	<arg name="extensions" value="php"/>
	<arg name="parallel" value="8"/><!-- Enables parallel processing when available for faster results. -->

	<!-- Rules: WordPress Coding Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties -->
	<config name="minimum_supported_wp_version" value="5.2"/>
	<rule ref="WordPress"/>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<exclude-pattern>../common/</exclude-pattern>
		<properties>
			<!-- Value: replace the function, class, and variable prefixes used. Separate multiple prefixes with a comma. -->
			<property name="prefixes" type="array" value="wordpress_plugin_name"/>
		</properties>
	</rule>
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array" value="wordpress-plugin-name-textdomain"/>
		</properties>
	</rule>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
		<properties>
			<property name="blank_line_check" value="true"/>
		</properties>
	</rule>

	<!-- Do not require docblocks for unit tests -->
	<rule ref="Squiz.Commenting.FunctionComment.Missing">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FileComment.Missing">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.ClassComment.Missing">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.ClassComment.SpacingAfter">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.DocComment.Empty">
    	<exclude-pattern>../test/*</exclude-pattern>
    </rule>
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment.Missing">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag.Missing">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>

	<!-- Ignore filename error -->
	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>

	<!-- Exclude php tests from file and class name sniffs (for Core parity). -->
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
	<rule ref="PEAR.NamingConventions.ValidClassName.Invalid">
		<exclude-pattern>../test/*</exclude-pattern>
	</rule>
</ruleset>
